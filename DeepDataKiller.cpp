#include <iostream> // for cin cout
#include <fstream>  // for file operations
#include <string>  // for string operations
#include <iomanip>  // for clock_t, clock()
using namespace std;

int main()
{    //      START CODE BELOW !
    clock_t s;
    short fId=0;
    long long rVef=0;
    char dLett=0;
    fstream TheFile;

    // Select Drive.
    AskDrive:
    cout<<"\n Provide the correct target drive letter (like d or D)-  ";
    cin>>dLett;
    if (!(dLett>='a' && dLett<='z') && !(dLett>='A' && dLett<='Z'))
    {
        cout<<"\n Invalid letter, please try again.";
        goto AskDrive;
    }
    // Checking the drive's existence.
    cout<<"\n ";
    if (short (system((string()+dLett+':').c_str()))==1)
        goto AskDrive;

    // Creating dedicated dir.
    system((string()+"mkdir "+dLett+":\\DDKiller").c_str());
    // Creating new file.
    CreateNew:
    TheFile.open(string()+dLett+":/DDKiller/file.BLOCK"+to_string(fId), ios::out);
	if (!TheFile)
    {
        cout<<" Block file not created, following maybe the reason(s)-\n\
             - Access denied or you are not an admin.\n\
             - Drive has no more available space.\n\n\
        Please check one/all and then, ";
        system("pause");
        goto CreateNew;
    }
    // init Warning
    if (fId==0)
    {
        cout<<" YOUR NON-DELETED DATA IS 100% SAFE.\n\n Deleted data on selected block storage will now be deeply destroyed on mannual request.\n\n\t YOU CAN NEVER REVERSE IT!\n\
    Close the console  OR  ";
        system("pause");
        s=clock();  // Current clock time stored in "s" for START
    }

    // Start writing new data.
    cout<<"\n Cleaning deleted block #"<<fId;
    while (TheFile.tellg()<=524288000 && TheFile.tellg()!=-1)  // 2000MB (2097152000) Max file size (1char == 1byte).
    {    // 3068 bytes data.
        TheFile
        rVef++;
    }
    if (TheFile.tellg()==-1)
    {
        TheFile.close();
        cout<<"\n\n All blocks reached! Temporary block files will now be cleared.";
        goto TheEnd;
    }
    // Else, create next (another) file.
    TheFile.close();
    fId++;
    goto CreateNew;
    
    TheEnd:
    // Removing rmdir /s /q a:\DDKiller
    system((string()+"rmdir /s /q "+dLett+":\\DDKiller").c_str());

    //      END CODE ABOVE !
    clock_t e=clock();  // Current clock time stored in "e" for END
    rVef=(rVef*3068)/1024/1024;
    cout<<"\n\n Total kill(s) = "<<rVef<<" MB(s) or "<<(float)rVef/1024<<" GB(s), ";
    system("pause");
    cout<<"\n Time taken = "<<double(e-s) / double(CLOCKS_PER_SEC)<<"s, ";
    system("pause");    // To hold the console output.

    return 0;
}
